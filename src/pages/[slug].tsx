import { type NextPage } from "next";
import Head from "next/head";
import ErrorPAge from "~/Components/ErrorPage";
// import { LoadingPage } from "~/Components/Loading";
// import { LoadingPage } from "~/Components/Loading";
import { api } from "~/utils/api";

const ProfilePage: NextPage<{ firstName: string }> = ({ firstName}) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    firstName,
  });

  if (!data)
    return (
      <div>
        <ErrorPAge />
      </div>
    );
  console.log("Data inside the slug file ", data.firstName);

  return (
    <>
      <Head>
        <title>{data.firstName}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center ">
        <h1>hello {data.firstName}</h1>
      </main>
    </>
  );
};

import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { type GetStaticProps } from "next";
import superjson from "superjson";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("no slug");

  const firstName = slug.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ firstName });

  //   // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  //   const serializedData = JSON.parse(JSON.stringify(ssg.dehydrate()));

  return {
    props: {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      trpcState: ssg.dehydrate(),
      firstName,
    },
  };
};

export const getStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export default ProfilePage;
